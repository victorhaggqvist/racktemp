var RackTemp = function() {
    "use strict";
    function clock() {
        var today = new Date(), h = today.getHours(), m = today.getMinutes();
        h = _leadZero(h), m = _leadZero(m), document.getElementById("clock").innerHTML = h + ":" + m;
    }
    function _leadZero(i) {
        return 10 > i && (i = "0" + i), i;
    }
    var _timestamp, _token, _host, chart = function() {
        var _default = {
            data: {
                columns: [],
                type: "spline",
                x: "x"
            }
        }, hour = {
            bindto: "#today",
            data: _default.data,
            axis: {
                x: {
                    type: "timeseries",
                    tick: {
                        format: "%M"
                    }
                }
            },
            tooltip: {
                format: {
                    title: function(d) {
                        return hourTooltipFormat(d);
                    }
                }
            }
        }, today = {
            bindto: "#today",
            data: _default.data,
            axis: {
                x: {
                    label: "Hour",
                    type: "timeseries",
                    tick: {
                        count: 12,
                        format: "%H"
                    }
                },
                y: {
                    label: {
                        text: "Degree (C)",
                        position: "outer-middle"
                    }
                }
            }
        }, week = {
            bindto: "#week",
            data: _default.data,
            axis: {
                x: {
                    type: "timeseries",
                    tick: {
                        count: 12,
                        format: "%d/%m %H"
                    }
                },
                y: {
                    label: {
                        text: "Degree (C)",
                        position: "outer-middle"
                    }
                }
            }
        }, month = {
            bindto: "#month",
            data: _default.data,
            axis: {
                x: {
                    type: "timeseries",
                    tick: {
                        count: 24,
                        format: "%d/%m"
                    }
                },
                y: {
                    label: {
                        text: "Degree (C)",
                        position: "outer-middle"
                    }
                }
            },
            tooltip: {
                format: {
                    title: function(d) {
                        return monthTooltipFormat(d);
                    }
                }
            }
        }, hourTooltipFormat = d3.time.format("%H:%M"), monthTooltipFormat = d3.time.format("%d/%m %H");
        return {
            hour: hour,
            today: today,
            week: week,
            month: month
        };
    }(), loadToTab = function() {
        var url = document.location.toString();
        url.match("#") && $(".nav-tabs a[href=#" + url.split("#")[1] + "]").tab("show"), 
        $(".nav-tabs a").on("shown", function(e) {
            window.location.hash = e.target.hash;
        });
    }, _isArrayAllNull = function(arr) {
        for (var i = arr.length - 1; i >= 0; i--) if (null !== arr[i]) return !1;
        return !0;
    }, isChartEmpty = function(chartArray) {
        for (var i = 1; i < chartArray.length; i++) if (!_isArrayAllNull(chartArray[i])) return !1;
        return !0;
    }, _makeApiUrl = function(apiPath) {
        return "http://" + _timestamp + ":" + _token + "@" + _host + "/api/" + apiPath;
    }, setApiInfo = function(timestamp, token, host) {
        _timestamp = timestamp, _token = token, _host = host;
    }, _fetchData = function(url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, !0), xhr.onreadystatechange = function() {
            4 === xhr.readyState && 200 === xhr.status && callback(xhr.responseText);
        }, xhr.send();
    }, createChartToday = function() {
        var chartToday = c3.generate(chart.today);
        _fetchData(_makeApiUrl("graph/span/day"), function(resp) {
            var chartData = JSON.parse(resp);
            RackTemp.isChartEmpty(chartData) ? document.getElementById(chart.today.bindto.substring(1)).innerHTML = "No chart data" : chartToday.load({
                columns: chartData
            });
        });
    }, createChartHour = function() {
        var config = chart.hour, chartHour = c3.generate(config);
        _fetchData(_makeApiUrl("graph/span/hour"), function(resp) {
            var chartData = JSON.parse(resp);
            RackTemp.isChartEmpty(chartData) ? document.getElementById(config.bindto.substring(1)).innerHTML = "No chart data" : chartHour.load({
                columns: chartData
            });
        });
    }, createChartWeek = function() {
        var config = chart.week, chartWeek = c3.generate(config);
        _fetchData(_makeApiUrl("graph/span/week"), function(resp) {
            var chartData = JSON.parse(resp);
            RackTemp.isChartEmpty(chartData) ? document.getElementById(config.bindto.substring(1)).innerHTML = "No chart data" : chartWeek.load({
                columns: chartData
            });
        });
    }, createChartMonth = function() {
        var config = chart.month, chartMonth = c3.generate(config);
        _fetchData(_makeApiUrl("graph/span/month"), function(resp) {
            var chartData = JSON.parse(resp);
            RackTemp.isChartEmpty(chartData) ? document.getElementById(config.bindto.substring(1)).innerHTML = "No chart data" : chartMonth.load({
                columns: chartData
            });
        });
    }, _smtpPresetsSet = [ {
        host: "smtp.gmail.com",
        port: "465",
        encryption: 1
    } ], smtpSettingsSetup = function() {
        var _smtpPresets = document.getElementById("smtp-presets"), _smtpHost = document.getElementById("smtp-host"), _smtpPort = document.getElementById("smtp-port"), _smtpEncryption = document.getElementById("smtp-encryption"), _smtpAuth = document.getElementById("smtp-auth"), _smtpUser = document.getElementById("smtp-user"), _smtpPassword = document.getElementById("smtp-password");
        _smtpPresets.onchange = function() {
            var _currentPreset = _smtpPresets.options[_smtpPresets.selectedIndex].value;
            void 0 !== _smtpPresetsSet[_currentPreset] && (_smtpHost.value = _smtpPresetsSet[_currentPreset].host, 
            _smtpPort.value = _smtpPresetsSet[_currentPreset].port, _smtpEncryption.selectedIndex = _smtpPresetsSet[_currentPreset].encryption);
        }, _smtpAuth.onclick = function() {
            _smtpAuth.checked ? (_smtpUser.disabled = !1, _smtpPassword.disabled = !1, _smtpUser.required = !0, 
            _smtpPassword.required = !0) : (_smtpUser.disabled = !0, _smtpPassword.disabled = !0, 
            _smtpUser.required = !1, _smtpPassword.required = !1);
        };
    };
    return {
        chart: chart,
        clock: clock,
        loadToTab: loadToTab,
        isChartEmpty: isChartEmpty,
        setApiInfo: setApiInfo,
        createChartToday: createChartToday,
        createChartHour: createChartHour,
        createChartWeek: createChartWeek,
        createChartMonth: createChartMonth,
        smtpSettingsSetup: smtpSettingsSetup
    };
}();